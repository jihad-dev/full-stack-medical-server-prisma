generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               userRole
  needPasswordChange Boolean    @default(true)
  status             userStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  Patient            Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  profilePhoto        String?
  contactNumber       String
  address             String
  registrationNumber  String
  exprience           Int                  @default(0)
  gender              gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  user                User                 @relation(fields: [email], references: [email])
  doctorSpecialities  DoctorSpecialities[]
  doctorSchedule      DoctorSchedule[]
  appointment         Appointment[]
  prescription        Prescription[]
  review              Review[]

  @@map("doctors")
}

model Schedule {
  id             String           @id @default(uuid())
  startDateTime  DateTime
  endDateTime    DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  doctorSchedule DoctorSchedule[]
  appointment    Appointment?
}

model Appointment {
  id             String            @id @default(uuid())
  patientId      String
  doctorId       String
  scheduleId     String            @unique
  videoCallingId String
  status         AppointmentStatus @default(SCHEDULED)
  paymentStatus  PaymentStatus     @default(UNPAID)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  patient        Patient         @relation(fields: [patientId], references: [id])
  doctor         Doctor          @relation(fields: [doctorId], references: [id])
  schedule       Schedule        @relation(fields: [scheduleId], references: [id])
  doctorSchedule DoctorSchedule?
  payment        Payment?
  prescription   Prescription?
  review Review?
}

model Payment {
  id                 String        @id @default(uuid())
  appointmentId      String        @unique
  amount             Float
  transactionId      String @unique
  status             PaymentStatus @default(UNPAID)
  paymentGatewayData Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  appointment        Appointment   @relation(fields: [appointmentId], references: [id])
}

model DoctorSchedule {
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  isBooked      Boolean      @default(false)
  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])

  @@id([doctorId, scheduleId])
}

model Patient {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  age               Int
  contactNumber     String
  profilePhoto      String?
  address           String
  isDeleted         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [email], references: [email])
  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]
  appointment       Appointment[]
  prescription      Prescription[]
  review            Review[]
}

model Specialities {
  id                 String               @id @default(uuid())
  title              String
  icon               String
  doctorSpecialities DoctorSpecialities[]
}

model DoctorSpecialities {
  specialitiesId String
  doctorId       String
  // Relation mapping
  specialities   Specialities @relation(fields: [specialitiesId], references: [id])
  doctor         Doctor       @relation(fields: [doctorId], references: [id])

  @@id([specialitiesId, doctorId])
}

model Prescription {
  id            String    @id @default(uuid())
  appointmentId String    @unique
  doctorId      String
  patientId     String
  instructions  String
  followUpDate  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])
}

model Review {
  id            String   @id @default(uuid())
  patientId     String
  doctorId      String
  appointmentId String   @unique
  rating        Float
  comment       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  patient     Patient     @relation(fields: [patientId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  dateOfBirth         DateTime
  gender              gender
  bloodGroup          BloodGroup
  hasAllergies        Boolean?
  hasDiabetes         Boolean?
  height              String
  weight              String
  smokingStatus       Boolean?
  dietaryPreferences  String?
  pregnancyStatus     Boolean?
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?
  recentAnxiety       Boolean?
  recentDepression    Boolean?
  maritalStatus       MaritalStatus
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model MedicalReport {
  id         String   @id @default(uuid()) // Primary Key
  patientId  String // Foreign Key
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation with Patient model
  patient Patient @relation(fields: [patientId], references: [id])
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  UNMARRIED
}

enum userRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum userStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  UNPAID
  PAID
}
